package com.github.maeda6uiui.mechtatel.core.input.keyboard;

import java.util.ArrayList;
import java.util.List;

import static org.lwjgl.glfw.GLFW.*;

/**
 * Converts macro-defined values to corresponding strings
 *
 * @author maeda6uiui
 */
class MacroStringConverter {
    public static String convertMacroToString(int macro) {
        return switch (macro) {
            case GLFW_KEY_SPACE -> "SPACE";
            case GLFW_KEY_APOSTROPHE -> "APOSTROPHE";
            case GLFW_KEY_COMMA -> "COMMA";
            case GLFW_KEY_MINUS -> "MINUS";
            case GLFW_KEY_PERIOD -> "PERIOD";
            case GLFW_KEY_SLASH -> "SLASH";
            case GLFW_KEY_0 -> "0";
            case GLFW_KEY_1 -> "1";
            case GLFW_KEY_2 -> "2";
            case GLFW_KEY_3 -> "3";
            case GLFW_KEY_4 -> "4";
            case GLFW_KEY_5 -> "5";
            case GLFW_KEY_6 -> "6";
            case GLFW_KEY_7 -> "7";
            case GLFW_KEY_8 -> "8";
            case GLFW_KEY_9 -> "9";
            case GLFW_KEY_SEMICOLON -> "SEMICOLON";
            case GLFW_KEY_EQUAL -> "EQUAL";
            case GLFW_KEY_A -> "A";
            case GLFW_KEY_B -> "B";
            case GLFW_KEY_C -> "C";
            case GLFW_KEY_D -> "D";
            case GLFW_KEY_E -> "E";
            case GLFW_KEY_F -> "F";
            case GLFW_KEY_G -> "G";
            case GLFW_KEY_H -> "H";
            case GLFW_KEY_I -> "I";
            case GLFW_KEY_J -> "J";
            case GLFW_KEY_K -> "K";
            case GLFW_KEY_L -> "L";
            case GLFW_KEY_M -> "M";
            case GLFW_KEY_N -> "N";
            case GLFW_KEY_O -> "O";
            case GLFW_KEY_P -> "P";
            case GLFW_KEY_Q -> "Q";
            case GLFW_KEY_R -> "R";
            case GLFW_KEY_S -> "S";
            case GLFW_KEY_T -> "T";
            case GLFW_KEY_U -> "U";
            case GLFW_KEY_V -> "V";
            case GLFW_KEY_W -> "W";
            case GLFW_KEY_X -> "X";
            case GLFW_KEY_Y -> "Y";
            case GLFW_KEY_Z -> "Z";
            case GLFW_KEY_LEFT_BRACKET -> "LEFT_BRACKET";
            case GLFW_KEY_BACKSLASH -> "BACKSLASH";
            case GLFW_KEY_RIGHT_BRACKET -> "RIGHT_BRACKET";
            case GLFW_KEY_GRAVE_ACCENT -> "GRAVE_ACCENT";
            case GLFW_KEY_WORLD_1 -> "WORLD_1";
            case GLFW_KEY_WORLD_2 -> "WORLD_2";
            case GLFW_KEY_ESCAPE -> "ESCAPE";
            case GLFW_KEY_ENTER -> "ENTER";
            case GLFW_KEY_TAB -> "TAB";
            case GLFW_KEY_BACKSPACE -> "BACKSPACE";
            case GLFW_KEY_INSERT -> "INSERT";
            case GLFW_KEY_DELETE -> "DELETE";
            case GLFW_KEY_RIGHT -> "RIGHT";
            case GLFW_KEY_LEFT -> "LEFT";
            case GLFW_KEY_DOWN -> "DOWN";
            case GLFW_KEY_UP -> "UP";
            case GLFW_KEY_PAGE_UP -> "PAGE_UP";
            case GLFW_KEY_PAGE_DOWN -> "PAGE_DOWN";
            case GLFW_KEY_HOME -> "HOME";
            case GLFW_KEY_END -> "END";
            case GLFW_KEY_CAPS_LOCK -> "CAPS_LOCK";
            case GLFW_KEY_SCROLL_LOCK -> "SCROLL_LOCK";
            case GLFW_KEY_NUM_LOCK -> "NUM_LOCK";
            case GLFW_KEY_PRINT_SCREEN -> "PRINT_SCREEN";
            case GLFW_KEY_PAUSE -> "PAUSE";
            case GLFW_KEY_F1 -> "F1";
            case GLFW_KEY_F2 -> "F2";
            case GLFW_KEY_F3 -> "F3";
            case GLFW_KEY_F4 -> "F4";
            case GLFW_KEY_F5 -> "F5";
            case GLFW_KEY_F6 -> "F6";
            case GLFW_KEY_F7 -> "F7";
            case GLFW_KEY_F8 -> "F8";
            case GLFW_KEY_F9 -> "F9";
            case GLFW_KEY_F10 -> "F10";
            case GLFW_KEY_F11 -> "F11";
            case GLFW_KEY_F12 -> "F12";
            case GLFW_KEY_F13 -> "F13";
            case GLFW_KEY_F14 -> "F14";
            case GLFW_KEY_F15 -> "F15";
            case GLFW_KEY_F16 -> "F16";
            case GLFW_KEY_F17 -> "F17";
            case GLFW_KEY_F18 -> "F18";
            case GLFW_KEY_F19 -> "F19";
            case GLFW_KEY_F20 -> "F20";
            case GLFW_KEY_F21 -> "F21";
            case GLFW_KEY_F22 -> "F22";
            case GLFW_KEY_F23 -> "F23";
            case GLFW_KEY_F24 -> "F24";
            case GLFW_KEY_F25 -> "F25";
            case GLFW_KEY_KP_0 -> "KP_0";
            case GLFW_KEY_KP_1 -> "KP_1";
            case GLFW_KEY_KP_2 -> "KP_2";
            case GLFW_KEY_KP_3 -> "KP_3";
            case GLFW_KEY_KP_4 -> "KP_4";
            case GLFW_KEY_KP_5 -> "KP_5";
            case GLFW_KEY_KP_6 -> "KP_6";
            case GLFW_KEY_KP_7 -> "KP_7";
            case GLFW_KEY_KP_8 -> "KP_8";
            case GLFW_KEY_KP_9 -> "KP_9";
            case GLFW_KEY_KP_DECIMAL -> "KP_DECIMAL";
            case GLFW_KEY_KP_DIVIDE -> "KP_DIVIDE";
            case GLFW_KEY_KP_MULTIPLY -> "KP_MULTIPLY";
            case GLFW_KEY_KP_SUBTRACT -> "KP_SUBTRACT";
            case GLFW_KEY_KP_ADD -> "KP_ADD";
            case GLFW_KEY_KP_ENTER -> "KP_ENTER";
            case GLFW_KEY_KP_EQUAL -> "KP_EQUAL";
            case GLFW_KEY_LEFT_SHIFT -> "LEFT_SHIFT";
            case GLFW_KEY_LEFT_CONTROL -> "LEFT_CONTROL";
            case GLFW_KEY_LEFT_ALT -> "LEFT_ALT";
            case GLFW_KEY_LEFT_SUPER -> "LEFT_SUPER";
            case GLFW_KEY_RIGHT_SHIFT -> "RIGHT_SHIFT";
            case GLFW_KEY_RIGHT_CONTROL -> "RIGHT_CONTROL";
            case GLFW_KEY_RIGHT_ALT -> "RIGHT_ALT";
            case GLFW_KEY_RIGHT_SUPER -> "RIGHT_SUPER";
            case GLFW_KEY_MENU -> "MENU";
            default -> "UNKNOWN";
        };
    }

    public static List<String> getAllMacroStrings() {
        var macroStrings = new ArrayList<String>();

        var macros = new ArrayList<Integer>();
        macros.add(GLFW_KEY_UNKNOWN);
        macros.add(GLFW_KEY_SPACE);
        macros.add(GLFW_KEY_APOSTROPHE);
        macros.add(GLFW_KEY_COMMA);
        macros.add(GLFW_KEY_MINUS);
        macros.add(GLFW_KEY_PERIOD);
        macros.add(GLFW_KEY_SLASH);
        macros.add(GLFW_KEY_0);
        macros.add(GLFW_KEY_1);
        macros.add(GLFW_KEY_2);
        macros.add(GLFW_KEY_3);
        macros.add(GLFW_KEY_4);
        macros.add(GLFW_KEY_5);
        macros.add(GLFW_KEY_6);
        macros.add(GLFW_KEY_7);
        macros.add(GLFW_KEY_8);
        macros.add(GLFW_KEY_9);
        macros.add(GLFW_KEY_SEMICOLON);
        macros.add(GLFW_KEY_EQUAL);
        macros.add(GLFW_KEY_A);
        macros.add(GLFW_KEY_B);
        macros.add(GLFW_KEY_C);
        macros.add(GLFW_KEY_D);
        macros.add(GLFW_KEY_E);
        macros.add(GLFW_KEY_F);
        macros.add(GLFW_KEY_G);
        macros.add(GLFW_KEY_H);
        macros.add(GLFW_KEY_I);
        macros.add(GLFW_KEY_J);
        macros.add(GLFW_KEY_K);
        macros.add(GLFW_KEY_L);
        macros.add(GLFW_KEY_M);
        macros.add(GLFW_KEY_N);
        macros.add(GLFW_KEY_O);
        macros.add(GLFW_KEY_P);
        macros.add(GLFW_KEY_Q);
        macros.add(GLFW_KEY_R);
        macros.add(GLFW_KEY_S);
        macros.add(GLFW_KEY_T);
        macros.add(GLFW_KEY_U);
        macros.add(GLFW_KEY_V);
        macros.add(GLFW_KEY_W);
        macros.add(GLFW_KEY_X);
        macros.add(GLFW_KEY_Y);
        macros.add(GLFW_KEY_Z);
        macros.add(GLFW_KEY_LEFT_BRACKET);
        macros.add(GLFW_KEY_BACKSLASH);
        macros.add(GLFW_KEY_RIGHT_BRACKET);
        macros.add(GLFW_KEY_GRAVE_ACCENT);
        macros.add(GLFW_KEY_WORLD_1);
        macros.add(GLFW_KEY_WORLD_2);
        macros.add(GLFW_KEY_ESCAPE);
        macros.add(GLFW_KEY_ENTER);
        macros.add(GLFW_KEY_TAB);
        macros.add(GLFW_KEY_BACKSPACE);
        macros.add(GLFW_KEY_INSERT);
        macros.add(GLFW_KEY_DELETE);
        macros.add(GLFW_KEY_RIGHT);
        macros.add(GLFW_KEY_LEFT);
        macros.add(GLFW_KEY_DOWN);
        macros.add(GLFW_KEY_UP);
        macros.add(GLFW_KEY_PAGE_UP);
        macros.add(GLFW_KEY_PAGE_DOWN);
        macros.add(GLFW_KEY_HOME);
        macros.add(GLFW_KEY_END);
        macros.add(GLFW_KEY_CAPS_LOCK);
        macros.add(GLFW_KEY_SCROLL_LOCK);
        macros.add(GLFW_KEY_NUM_LOCK);
        macros.add(GLFW_KEY_PRINT_SCREEN);
        macros.add(GLFW_KEY_PAUSE);
        macros.add(GLFW_KEY_F1);
        macros.add(GLFW_KEY_F2);
        macros.add(GLFW_KEY_F3);
        macros.add(GLFW_KEY_F4);
        macros.add(GLFW_KEY_F5);
        macros.add(GLFW_KEY_F6);
        macros.add(GLFW_KEY_F7);
        macros.add(GLFW_KEY_F8);
        macros.add(GLFW_KEY_F9);
        macros.add(GLFW_KEY_F10);
        macros.add(GLFW_KEY_F11);
        macros.add(GLFW_KEY_F12);
        macros.add(GLFW_KEY_F13);
        macros.add(GLFW_KEY_F14);
        macros.add(GLFW_KEY_F15);
        macros.add(GLFW_KEY_F16);
        macros.add(GLFW_KEY_F17);
        macros.add(GLFW_KEY_F18);
        macros.add(GLFW_KEY_F19);
        macros.add(GLFW_KEY_F20);
        macros.add(GLFW_KEY_F21);
        macros.add(GLFW_KEY_F22);
        macros.add(GLFW_KEY_F23);
        macros.add(GLFW_KEY_F24);
        macros.add(GLFW_KEY_F25);
        macros.add(GLFW_KEY_KP_0);
        macros.add(GLFW_KEY_KP_1);
        macros.add(GLFW_KEY_KP_2);
        macros.add(GLFW_KEY_KP_3);
        macros.add(GLFW_KEY_KP_4);
        macros.add(GLFW_KEY_KP_5);
        macros.add(GLFW_KEY_KP_6);
        macros.add(GLFW_KEY_KP_7);
        macros.add(GLFW_KEY_KP_8);
        macros.add(GLFW_KEY_KP_9);
        macros.add(GLFW_KEY_KP_DECIMAL);
        macros.add(GLFW_KEY_KP_DIVIDE);
        macros.add(GLFW_KEY_KP_MULTIPLY);
        macros.add(GLFW_KEY_KP_SUBTRACT);
        macros.add(GLFW_KEY_KP_ADD);
        macros.add(GLFW_KEY_KP_ENTER);
        macros.add(GLFW_KEY_KP_EQUAL);
        macros.add(GLFW_KEY_LEFT_SHIFT);
        macros.add(GLFW_KEY_LEFT_CONTROL);
        macros.add(GLFW_KEY_LEFT_ALT);
        macros.add(GLFW_KEY_LEFT_SUPER);
        macros.add(GLFW_KEY_RIGHT_SHIFT);
        macros.add(GLFW_KEY_RIGHT_CONTROL);
        macros.add(GLFW_KEY_RIGHT_ALT);
        macros.add(GLFW_KEY_RIGHT_SUPER);
        macros.add(GLFW_KEY_MENU);

        macros.forEach(macro -> {
            var macroString = convertMacroToString(macro);
            macroStrings.add(macroString);
        });

        return macroStrings;
    }
}
